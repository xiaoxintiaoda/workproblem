    今天做一个后台功能的时候，查询所有数据时，最多的一种查询条件可以查询出2w9多条数据,每次后台返回结果(包括翻页)大概需要22s，
    于是想着就把所有的数据使用memcached缓存起来，这样也就第一次查询的时候会慢一些，翻页的速度就很快了。
    
    但是结果在写完代码进行测试时，发现有的查询条件下，查询速度每次都很慢，进行翻页的操作也很慢，应该是没有经过缓存。但是有些查询条件又是好的，
    于是写代码调试之，使用memcached getResultCode的方法获取设置缓存时的result code,结果发现是 37(MEMCACHED_E2BIG),数据量过大，看网上说的
    memcached的key value长度限制，key	长度不能超过255字符长度，value	长度不能超过1024 * 1024字符长度（即 1M）。由于也不知道php中如何计算
    array的占用长度，就只能把数据分到多个key中进行存储。
    
    然后就是设置一个原始的数据key,叫做memkey,如果array长度没有超过5000条，就将数据存到memkey中。如果数组长度超过5000条，就使用array_chunk
    将数组分割为多个，取key name为memkey_x,然后将memkey_x组成的数组存到一个叫做memkey_explode的key中。这次每次取数据时，如果存在memkey_explode
    就从其中将key取出，然后根据key name分别获取key value拼成一个数组就解决问题了。
    
    然后写好后在进行测试，结果发现一种查询条件下，依然没有缓存，其他查询条件都没问题了，想不明白，只能再继续打日志查原因。
    结果发现是因为如果memcached set的数据量特别大的话，还是导致connect timeout,表现为memcached getResultCode的结果为31(MEMCACHED_TIMEOUT),
    但是自己写代码时只判断了result code 为37(MEMCACHED_E2BIG)时才进行分key存储，所以导致依然没有缓存，最后就直接将代码改为了 如果array的长度超过
    5000，就直接进行分key存储就解决问题了。
    
    然后再测试，发现第一次查询数据时，只花了8s(缓存还未生成)，而不是以前的22s,就想应该是因为，memcached set时，发送数据到超过多花了14s,改成当前写法，
    即时不使用memcached 每次的查询时间最多也是8s。第二次查询的话就是100多ms了(有缓存了)。
